# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=./.m2/repository"

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - package
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  only:
    - dev
  tags:
    - socialnet_runner
  script:
    - mvn clean
    - mvn compile
  cache:
    paths:
      - ./target
      - ./.m2

test:
  stage: test
  only:
    - dev
  tags:
    - socialnet_runner
  except:
    - tags
  script:
    - mvn test
  cache:
    paths:
      - ./target
      - ./.m2

package:
  stage: package
  only:
    - dev
  tags:
    - socialnet_runner
  except:
    - tags
  script:
    - mvn package -Dmaven.test.skip=true
  artifacts:
    paths:
      - target/*.jar
  cache:
    policy: pull
    paths:
      - ./target
      - ./.m2


build-docker-image:
  stage: deploy
  only:
    - dev
  tags:
    - socialnet_runner

  script:
    - (docker ps -a --format {{.Names}} | grep java-backend-app -w) && docker stop java-backend-app && docker rm java-backend-app || echo "Doesn't exist"
    - docker build -t java-pro41-backend:latest .
    - docker run --name java-backend-app -d -p 8086:8086 -e POSTGRESQL_HOST='java-backend-pg' -e POSTGRESQL_PORT=5432 --network=my_network -t java-pro41-backend:latest
    - docker system prune -a -f